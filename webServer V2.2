"""
    Author: Ruben Rudov
    Date: 08/03/2020
    Purpose: Web server
    Version: 2.2
    For previous versions (V 1.0 unsupported there) Github: rubenrudov - webServer -/
    /- ask for permission: <https://github.com/rubenrudov/Web-Server>
"""
import socket
# --- globals defined in the modules level ---
PORT = 80
IP = "0.0.0.0"
TIMEOUT = 30000   # 6000 milliseconds is a minute, socket timeout is after 5 minutes
TOP_LEVEL = "webroot"
# /--- globals defined in the modules level ---/


def read(resource):
    """
    :param resource: file name
    :return: The content of the file (if there is a file) or File Not Found, error: 404 (if the file doesn't exist)
    """
    requested = TOP_LEVEL + resource
    try:
        with open(requested, 'rb') as f:
            content = f.read()
        return content
    except (FileNotFoundError, FileExistsError) as e:
        print("File Not Found, error: " + f"{404}", e)
        return None


def unique_response(f_type):
    """
    :param f_type: File type
    :return: It's Content-Type and adds it to the header
    """
    if f_type == "html" or "txt":
        type_response = "Content-Type: text/html; charset=utf-8\r\n"
    elif f_type == "jpg":
        type_response = "Content-Type: image/jpeg\r\n"
    elif f_type == "js":
        type_response = "Content-Type: text/javascript; charset=UTF-8\r\n"
    elif f_type == "css":
        type_response = "Content-Type: text/css\r\n"
    else:
        type_response = "Content-Type: unsupported file type\r\n"
    return type_response


def validate(client_request):
    try:
        """
        :param client_request: a client request to validate
        :return: if valid http request - true, else - false
        """
        if ("GET " and "http://") in client_request and (client_request[-12::] is " HTTP/1.1\r\n"):
            return True
        return False
    except (ConnectionError, ConnectionAbortedError) as e:
        print(e)


def handle_client(client_socket):
    """
        Handling request
        :param: client_socket: a connection between server to client
    """
    try:
        print('Client connected - starts handling')
        while True:
            client_request = client_socket.recv().decode()
            is_valid = validate(client_request)
            if is_valid:
                resource = client_request.split()[1]
                print("Valid HTTP GET request. ")
                if resource.startswith("calculate-next"):
                    """  supports the calculate-next?q command """
                    digit = ''
                    for letter in range(13, len(resource)):
                        if resource[letter].isdigit() and resource[letter + 1].isdigit():
                            digit += letter
                        elif resource[letter].isdigit() and not resource[letter + 1].isdigit():
                            digit += letter
                            break
                        else:
                            pass
                    client_socket.sendall(str(int(digit) + 1).encode())
                else:
                    handle_request(resource, client_socket)
            else:
                print("Invalid HTTP GET request. Can not handle this request. ")
                break
        print("Closing connection")
        client_socket.close()
    except (ConnectionAbortedError, ConnectionError) as e:
        print(e)


def handle_request(resource, client_socket):
    """
    :param resource: URL
    :param client_socket: connection server to client
    Purpose: checks the given url and sends a http response to the client
    """
    try:
        file, response, redirection,  = None, None, {"/source.html": "http://webroot/imgs/abstract.jpg"}
        redirect_client = False
        if resource is None:   # Client "asks" for root
            url = "/"
        else:
            url = resource

        if url is "/":
            file = "/index.html"    # Redirecting to the 'root' page

        elif url in redirection:
            response = "Found 302 HTTP/1.1"
            redirect_client = True
        else:
            file = resource

        if redirect_client:
            content = '<!DOCTYPE html><html lang="en"><head><meta charset="ASCII"><title>Title</title> ' + \
                      '</head><body><h1>302 Found. go to: "http://webroot/imgs/jpicture.jpg"</h1></body></html>'
            # Content of redirected code page
        else:
            data = read(file)
            if data is None:
                response = "HTTP/1.1 404 Not Found\r\n"
                content = "<!DOCTYPE html><html lang='en'><head><meta charset='ASCII'><title>Title</title>" + \
                          "</head><body><h1>  404 - File Not Found </h1></body></html>"
                # Content of not found code page
            else:
                response = "HTTP/1.1 200 OK\r\n"
                content = data
        header = "content-length:" + str(len(content)) + "\r\n\r\n"     # HTTP header creating
        if "." in url:
            f_type = url.split(".")[-1].replace(r"\ "[0], "")
            header += unique_response(f_type)
        http_response = response + header + content                      # Creating response
        client_socket.send(http_response)                                # Sends the response to the client

    except Exception as e:
        print(e)


def main():
    server_socket = None  # Resetting a variable : try -> finally variable scopes
    query_code = 0        # Used for check if was connection error while running the main function
    try:
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((IP, PORT))
        server_socket.listen()  # Listening to unlimited amount of clients, will be explained later
        print("The server is listening for clients on port 80 .. ")
        while True:
            client_socket, client_address = server_socket.accept()
            print("Connection was occurred . ")
            client_socket.settimeout(TIMEOUT)  # closes the connection after five minutes
            handle_client(client_socket)

    except (ConnectionError, ConnectionRefusedError) as e:
        print(e)
        query_code = 1

    finally:
        server_socket.close()
        print("Finished. Exit status: {}".format(query_code))


if __name__ == "__main__":
    main()
